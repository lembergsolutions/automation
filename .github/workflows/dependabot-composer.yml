name: Dependabot Composer
on:
  workflow_call:
    inputs:
      php_version:
        required: true
        type: string
      composer_version:
        required: true
        type: string
      dependency_name:
        required: true
        type: string
      head_ref:
        required: false
        type: string
        default: ${{ github.head_ref }}
      base_ref:
        required: false
        type: string
        default: ${{ github.base_ref }}
      web_root:
        required: false
        type: string
        default: docroot
    secrets:
      COMPOSER_AUTH:
        description: 'Composer auth data'
        required: false

permissions:
  contents: write
  pull-requests: write

jobs:
  composer:
    name: amend composer updates
    runs-on: ubuntu-latest
    env:
      COMPOSER_AUTH: '${{ secrets.COMPOSER_AUTH }}'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout to the corresponding branch
        run: |
          git fetch origin
          git checkout --force ${{ inputs.base_ref }}

      - name: Merge Composer auth data before using shivammathur/setup-php
        run: |
          GITHUB_DEFAULT_AUTH=$(echo '{"github-oauth": {"github.com": "${{ github.token }}"}}')
          COMPOSER_AUTH=$(jq -cs 'add' <(echo $GITHUB_DEFAULT_AUTH) <(echo "$COMPOSER_AUTH"))
          echo "::add-mask::$COMPOSER_AUTH"
          echo "COMPOSER_AUTH=$COMPOSER_AUTH" >> $GITHUB_ENV

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: ${{ inputs.php_version }}
          tools: composer:${{ inputs.composer_version }}

      - name: Get Composer config
        id: composer_config
        run: |
          echo "cache_dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer_config.outputs.cache_dir }}
          key: php-${{ inputs.php_version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: php-${{ inputs.php_version }}-

      - name: Build the codebase
        run: |
          composer install --no-interaction --no-progress --optimize-autoloader --prefer-dist

      - name: Get Drupal core major version
        id: drupal_version
        run: |
          echo "core_version=$(./vendor/bin/drush status --format=json | jq '."drupal-version" | split(".")[0] | tonumber')" >> $GITHUB_OUTPUT

      - name: Start MySQL service & create DB
        if: ${{ steps.drupal_version.outputs.core_version != 7 }}
        run: |
          sudo systemctl start mysql.service
          sudo mysql -proot -e "CREATE USER drupal@localhost IDENTIFIED BY 'drupal'; GRANT ALL ON *.* TO drupal@localhost; FLUSH PRIVILEGES;"
          sudo mysql -proot -e 'CREATE DATABASE drupal;'

      - name: Install the project from a mini dump & import configuration
        if: ${{ steps.drupal_version.outputs.core_version != 7 }}
        run: |
          cd ./${{ inputs.web_root }}
          php ./core/scripts/db-tools.php import ../.ci/dump.php.gz
          cd -
          ./vendor/bin/drush cache:rebuild
          ./vendor/bin/drush updatedb --yes
          ./vendor/bin/drush config:import --yes

      - name: Checkout to a new branch & restore composer.lock
        run: |
          git checkout --force ${{ inputs.head_ref }}
          git restore -s ${{ inputs.base_ref }} composer.lock

      - name: Get Dependabot update type
        id: dependabot_update_type
        if: ${{ github.actor == 'dependabot[bot]' }}
        uses: dependabot/fetch-metadata@v1

      - name: Sometime Dependabot "forgets" to update composer.json
        if: ${{ github.actor == 'dependabot[bot]' && steps.dependabot_update_type.outputs.update-type == 'version-update:semver-major' }}
        run: |
          NEW_MAJOR_VERSION=$((`composer info ${{ inputs.dependency_name }} --format=json | jq '.versions[0] | split(".")[0] | tonumber'` + 1))
          NEW_MINOR_VERSION=$(composer info ${{ inputs.dependency_name }} --format=json | jq '.versions[0] | split(".")[1] | tonumber')
          composer require ${{ inputs.dependency_name }}:^${NEW_MAJOR_VERSION}.${NEW_MINOR_VERSION} --no-update

      - name: Update drupal/core (and friends) (with Composer plugins and scripts enabled)
        if: ${{ startsWith(inputs.dependency_name, 'drupal/core') }}
        run: |
          composer update "drupal/core-*" --with-all-dependencies --no-interaction --prefer-dist --prefer-stable

      - name: Update goalgorilla/open_social (and friends) (with Composer plugins and scripts enabled)
        if: ${{ startsWith(inputs.dependency_name, 'goalgorilla/open_social') }}
        run: |
          composer update "goalgorilla/*" --with-all-dependencies --no-interaction --prefer-dist --prefer-stable

      - name: Update other packages (with Composer plugins and scripts enabled)
        if: ${{ !startsWith(inputs.dependency_name, 'drupal/core') && !startsWith(inputs.dependency_name, 'goalgorilla/open_social') }}
        run: |
          composer update ${{ inputs.dependency_name }} --with-all-dependencies --no-interaction --prefer-dist --prefer-stable

      - name: Update the DB & export the configuration
        if: ${{ steps.drupal_version.outputs.core_version != 7 }}
        run: |
          ./vendor/bin/drush cache:rebuild
          ./vendor/bin/drush updatedb --yes
          ./vendor/bin/drush config:export --yes

      - name: Post-update drupal/webform
        if: ${{ inputs.dependency_name == 'drupal/webform' && steps.drupal_version.outputs.core_version != 7 }}
        run: |
          ./vendor/bin/drush webform:composer:update
          WEBFORM_PACKAGES=$(./vendor/bin/drush webform:libraries:composer | jq -r '[.repositories[].package.name] | join(" ")')
          composer update $WEBFORM_PACKAGES

      - name: Commit the result & push update to the corresponding branch
        run: |
          git add .
          if [ -z "$(git status --porcelain)" ]; then
            exit 0
          fi
          # Get username & email from the previous commit (dependabot's)
          git config --local user.email "$(git log --format='%ae' HEAD^!)"
          git config --local user.name "$(git log --format='%an' HEAD^!)"
          # Commit without a message.
          git commit --allow-empty-message -nm ""
          git push origin ${{ inputs.head_ref }} --force
